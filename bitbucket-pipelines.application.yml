# Our custom image that contains the flutter toolkit for web.
# Make sure to add run-as-user: flutter to steps that use the flutter cli
image:
  name: registry.digitalocean.com/polar-labs-registry/flutter-runner:3.24.4
  username: $DIGITALOCEAN_ACCESS_TOKEN
  password: $DIGITALOCEAN_ACCESS_TOKEN

# enable Docker for your repository
options:
  docker: true

definitions:
  steps:
    # There is currently an issue building the webapp in the dockerfile, 
    # so the webapp is built in the pipeline and then copied into the docker container
    # https://github.com/flutter/flutter/issues/158088
    - step: &build-flutter-web
        name: "Build Flutter Web in Pipeline [Temporary]"
        run-as-user: flutter
        script:
          - source set_env.sh #loads and executes environment variables and functions from a shell script named set_env.sh into the current shell session.
          
          # attempt to build the flutter web app in the pipeline instead
          # of the docker container to try and get around weird bug where build hangs    
          - flutter clean
          - flutter pub get
          - flutter build web --no-pub --release --verbose
        artifacts:
          - build/**

    - step: &put-container-into-registry
        name: Put docker image into DO registry
        image: alpine/doctl:1.27.13 # comes with doctl, kubectl, and helm
        script:
          - source set_env.sh #loads and executes environment variables and functions from a shell script named set_env.sh into the current shell session.
          - doctl registry login --expiry-seconds 3600
          - export IMAGE_NAME=$IMAGE_TAG_NAME:$BITBUCKET_COMMIT
          - docker build -t $IMAGE_NAME $BITBUCKET_CLONE_DIR
          - docker push $IMAGE_NAME
        services:
          - docker

    - step: &run-tests
        name: Run Tests
        script:
          - echo "tests tbd ..."

    - step: &deploy-to-kubernetes
        name: Deploy to Kubernetes namespace
        image: alpine/doctl:1.27.13
        script:
          # The key thing about source is that it runs the script in the current shell environment, rather than in a new subshell. This means:
          # Any environment variables set in set_env.sh will be available in the current shell session
          # Any functions defined in the script become available
          # Any changes to the shell environment persist after the script finishes
          - source set_env.sh #loads and executes environment variables and functions from a shell script named set_env.sh into the current shell session.
          - export IMAGE_NAME=$IMAGE_TAG_NAME:$BITBUCKET_COMMIT # this is deterministic, so we can just set it again here
          - doctl kubernetes cluster kubeconfig save $KUBE_CLUSTER_ID
          - apk add gettext moreutils #Install 'sponge' and 'envsubst'
          - helm dependency update ./flutter-web-charts
          - envsubst < ./flutter-web-charts/values.yaml | sponge ./flutter-web-charts/values.yaml #Substitute variables in values.yaml with env variable and then write them out to console
          - cat ./flutter-web-charts/values.yaml
          # - helm install $APP_NAME-$ENV_NAME ./flutter-web-charts --dry-run # turn this on to print the generated manifest files for debugging
          - helm upgrade $APP_NAME-$ENV_NAME ./flutter-web-charts --debug --install --force --timeout=120s --wait

pipelines:
  branches:
    main:
      # deploy to production, in this workflow, we'll have preview env and, once merged, things go to production
      - step: *run-tests
      - stage:
          name: Deploy to Production
          deployment: production
          trigger: manual
          steps:
            - step:
                name: Setup Environment
                script:
                  # set deployment env vars
                  - echo "export ENV_NAME=production" >> set_env.sh
                  - echo "export FULL_DOMAIN=app.$BASE_DOMAIN" >> set_env.sh
                artifacts:
                  - set_env.sh

            - step: *build-flutter-web
            - step: *put-container-into-registry
            - step: *deploy-to-kubernetes

  pull-requests:
    "**":
      - step: *run-tests
      - stage:
          name: Deploy Preview Environment
          deployment: preview
          trigger: manual
          steps:
            - step:
                name: Setup Environment
                script:
                  - echo "export ENV_NAME=preview-$BITBUCKET_PR_ID" >> set_env.sh
                  - echo "export FULL_DOMAIN=preview-$BITBUCKET_PR_ID.$BASE_DOMAIN" >> set_env.sh
                artifacts:
                  - set_env.sh

            - step: *build-flutter-web
            - step: *put-container-into-registry
            - step: *deploy-to-kubernetes

  custom:
    close-preview-environment:
      - variables:
          - name: BITBUCKET_PR_ID
      - step:
            name: Delete Preview Environment
            image: alpine/doctl:1.27.13
            script:
              - export ENV_NAME=preview-$BITBUCKET_PR_ID
              - doctl kubernetes cluster kubeconfig save $KUBE_CLUSTER_ID
              - helm uninstall $APP_NAME-$ENV_NAME
